---
title: "Day3_EDS221"
format: html
editor: visual
execute: 
  warning: FALSE
---

```{r}
library(palmerpenguins)
library(tidyverse)
```

## Conditional Statements

```{r}
#store temperature as 98.2
temperature <- 98.2

if (temperature > 97) {
  print("Temperature Warning")
}

#store temperature as 95 and nothing returns because condition is not met
temperature <- 95

if (temperature > 97) {
  print("Temperature Warning")
}

#shows no temperature warning
temperature <- 95

if (temperature > 97) {
  print("Temperature Warning")
} else
  print("No Temperature Warning")

```

```{r}
# Create an if else statement for blue whale lengths, create a variable blue whale, which has a value of 40. add an if else statements that returns giant if the length exceeds 35, medium if the length is between 20 and 35, or small if the length is less than 20
blue_whale <- 40

if (blue_whale > 35) {
  print("Giant")
} else if (blue_whale >= 20 & blue_whale <= 35) {
  print("Medium")
} else if (blue_whale < 20) {
  print("Small")
}
 
```

## Switch Statement

```{r}
housing_type <- "single"

switch(housing_type, 
       "single" = print("400"),
       "double" = print("750"),
       "whole" = print("1100"))

if (housing_type == "whole") {
  print("1100")
} else if (housing_type == "double") {
  print("750")
} else if (housing_type == "single") {
  print("400")
}
```

## For Loops

```{r}
# create a vector named height
height <- c(58, 61, 65, 72, 89, 94, 101)
# this line returns 1,2,3,4,5,6,7
for (i in seq_along(height)) {
  half_height = height[i] / 2
  print(half_height)
}
```

```{r}
#for each value in the height vector, return the sum of the value + the one right after it

height <- c(58, 61, 65, 72, 89, 94, 101)

for (i in seq_along(height)) {
  consecutive_sum_height = height[i] + height[i + 1]
  print(consecutive_sum_height)
}

# to not get a na value at the end

height <- c(58, 61, 65, 72, 89, 94, 101)

for (i in seq(1:(length(height) - 1))) {
   consecutive_sum_height = height[i] + height[i + 1]
  print(consecutive_sum_height)
}
```

```{r}
# write a for loop that calculates the value of height for each element divided by the mean of the entire vector
height <- c(58, 61, 65, 72, 89, 94, 101)

for (i in seq_along(height)) {
  mean_height = height[i] / mean(height)
  print(mean_height)
}


```

## For Loops with conditions

-   is.numeric() asks is this thing numeric

-   mean(vec, na.rm = TRUE)

```{r}
#write a for loop with a conditional if statement that returns the means of all numeric variables in the penguins dataset

for (i in seq_along(penguins)) {
  if (is.numeric(penguins[[i]])) {
     mean_penguin = mean(penguins[[i]], na.rm = TRUE)
     print(mean_penguin)
  }
}
  
```

## Functional Programming for easier iteration

-   apply() to iterate over rows and columns. Margin = 1 = rows, Margin = 2 = columns

```{r}
# example with apply()
apply(X = mtcars, MARGIN = 2, FUN = median)
# or
apply(mtcars, 2, median)
```

-   Dplyr::

```{r}
# dplyr - mean flipper length of penguins by species
penguins %>% 
  group_by(species, sex, island) %>% 
# show summary of mean, sd, and max body mass by species and sex
  summarize(mean_flipper_length = mean(flipper_length_mm, na.rm = TRUE),
          sd_flipper_length = sd(flipper_length_mm, na.rm = TRUE),
            max_body_mass = max(body_mass_g, na.rm = TRUE))

```

```{r}
# start with data set penguins and then
penguins %>% 
# group by species and island and then 
  group_by(species, island) %>% 
# find summary statistic of mean and put them in a table by iterating across columns where the columns are numeric and remove missing values
  summarize(across(where(is.numeric), mean, na.rm = TRUE))
```

## Detecting a string pattern

```{r}
food <- "I love enchiladas"

if (str_detect(food, "burritos")) {
  print("Yay Burritos!")
} else {
  print("What about burritos?")
}

food <- "I love burritos"

if (str_detect(food, "burritos")) {
  print("Yay Burritos!")
} else {
  print("What about burritos?")
}

```
